#!/bin/bash
set -e
# Usage:
#   queue_rsync.sh --parallel=N --hosts=START_INDEX [--total_bw=MBPS] [--batch_size=SIZE] [--files-from=FILE] [rsync args...]
#
# Options:
#   --parallel=N         Use N parallel processes for transfer.
#   --hosts=START_INDEX  Starting index for hosts. Will use hosts START_INDEX through START_INDEX+N-1.
#   --total_bw=MBPS      Total bandwidth in Mbps to distribute across transfers (optional).
#   --batch_size=SIZE    Number of files to process in each batch (optional, default=10).
#   --files-from=FILE    File containing list of files to transfer (optional).
#
# Notes:
#   * Requires GNU Parallel and flock for safe queue operations
#   * Supports both remote-to-local and local-to-remote transfers
#   * Uses a queue-based approach instead of pre-chunking for better load balancing
#   * Assumes SSH keys are already configured for all hosts
#   * Be careful with the options you pass through to rsync.

# Define colours for STDERR text
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

# Check for required commands
if ! command -v parallel &> /dev/null; then
  echo -e "${RED}parallel could not be found${NC}"
  exit 1
fi

if ! command -v flock &> /dev/null; then
  echo -e "${RED}flock could not be found${NC}"
  exit 1
fi

# Default parallel processes
if [[ "$1" == --parallel=* ]]; then
  PARALLEL_RSYNC="${1##*=}"
  shift
else
  echo -e "${RED}ERROR: --parallel=N parameter is required${NC}"
  exit 1
fi

# Process hosts starting index
if [[ "$1" == --hosts=* ]]; then
  HOST_START_INDEX="${1##*=}"
  shift
else
  echo -e "${RED}ERROR: --hosts=START_INDEX parameter is required${NC}"
  exit 1
fi

# Process total bandwidth if provided
TOTAL_BW_MBPS=""
BANDWIDTH_PER_TRANSFER=""

if [[ "$1" == --total_bw=* ]]; then
  TOTAL_BW_MBPS="${1##*=}"
  # Calculate bandwidth limit per transfer
  # Convert Mbps to KB/s: Mbps รท 8 ร 1024 = KB/s
  TOTAL_BANDWIDTH=$((TOTAL_BW_MBPS * 1024 / 8))  # Convert Mbps to KB/s
  BANDWIDTH_PER_TRANSFER=$((TOTAL_BANDWIDTH / PARALLEL_RSYNC))
  shift
fi

# Process batch size if provided
BATCH_SIZE=10 # Default batch size
if [[ "$1" == --batch_size=* ]]; then
  BATCH_SIZE="${1##*=}"
  shift
fi

# Process files-from if provided
FILES_FROM=""
if [[ "$1" == --files-from=* ]]; then
  FILES_FROM="${1##*=}"
  if [ ! -f "$FILES_FROM" ]; then
    echo -e "${RED}ERROR: Files-from file '${FILES_FROM}' does not exist${NC}"
    exit 1
  fi
  shift
fi

echo -e "${GREEN}INFO: Using up to ${PARALLEL_RSYNC} processes for transfer ...${NC}"
echo -e "${GREEN}INFO: Using hosts ${HOST_START_INDEX} through $((HOST_START_INDEX + PARALLEL_RSYNC - 1)) ...${NC}"
echo -e "${GREEN}INFO: Using batch size of ${BATCH_SIZE} files${NC}"

if [ -n "$FILES_FROM" ]; then
  echo -e "${GREEN}INFO: Using files list from: ${FILES_FROM}${NC}"
fi

if [ -n "$TOTAL_BW_MBPS" ]; then
  echo -e "${GREEN}INFO: Total bandwidth: ${TOTAL_BW_MBPS} Mbps (${TOTAL_BANDWIDTH} KB/s)${NC}"
  echo -e "${GREEN}INFO: Bandwidth per transfer: ${BANDWIDTH_PER_TRANSFER} KB/s${NC}"
else
  echo -e "${GREEN}INFO: Bandwidth limiting disabled${NC}"
fi

# Extract source and destination arguments
SOURCE_ARG=""
DEST_ARG=""
RSYNC_OPTS=()

# Store all remaining arguments
REMAINING_ARGS=("$@")

# First, identify remote paths (containing a colon)
REMOTE_PATHS=()
for arg in "${REMAINING_ARGS[@]}"; do
  if [[ "$arg" =~ : ]]; then
    REMOTE_PATHS+=("$arg")
  fi
done

# Check that there is exactly one remote path
if [[ ${#REMOTE_PATHS[@]} -ne 1 ]]; then
  echo -e "${RED}ERROR: Exactly one remote path must be specified (found ${#REMOTE_PATHS[@]})${NC}"
  exit 1
fi

# The source and destination should be the last two arguments
for ((i=0; i<${#REMAINING_ARGS[@]}; i++)); do
  if [[ $i -lt $(( ${#REMAINING_ARGS[@]} - 2 )) ]]; then
    RSYNC_OPTS+=("${REMAINING_ARGS[$i]}")
  elif [[ $i -eq $(( ${#REMAINING_ARGS[@]} - 2 )) ]]; then
    SOURCE_ARG="${REMAINING_ARGS[$i]}"
  else
    DEST_ARG="${REMAINING_ARGS[$i]}"
  fi
done

# Check if source or destination is the remote path
IS_UPLOAD=false
if [[ "$SOURCE_ARG" =~ : ]]; then
  # Remote to local (download)
  REMOTE_ARG="$SOURCE_ARG"
  LOCAL_ARG="$DEST_ARG"
  IS_UPLOAD=false
  echo -e "${GREEN}INFO: Detected DOWNLOAD operation (remote to local)${NC}"
elif [[ "$DEST_ARG" =~ : ]]; then
  # Local to remote (upload)
  REMOTE_ARG="$DEST_ARG"
  LOCAL_ARG="$SOURCE_ARG"
  IS_UPLOAD=true
  echo -e "${GREEN}INFO: Detected UPLOAD operation (local to remote)${NC}"
else
  echo -e "${RED}ERROR: Could not identify remote path. Format should be [user@]host:/path${NC}"
  exit 1
fi

# Parse the remote argument
if [[ "$REMOTE_ARG" =~ ^([^@]+@)?([^:]+):(.+)$ ]]; then
  if [[ -n "${BASH_REMATCH[1]}" ]]; then
    REMOTE_USER="${BASH_REMATCH[1]%@}"
  else
    REMOTE_USER="" # No user specified
  fi
  REMOTE_HOST="${BASH_REMATCH[2]}"
  REMOTE_PATH="${BASH_REMATCH[3]}"
else
  echo -e "${RED}ERROR: Could not parse remote path. Format should be [user@]host:/path${NC}"
  exit 1
fi

# Create a temporary directory for our queue files
TMPDIR=$(mktemp -d)
trap 'rm -rf "${TMPDIR}"' EXIT
echo -e "${GREEN}INFO: Determining file list for transfer ...${NC}"

# For both upload and download, we need to get the file list
if [ -n "$FILES_FROM" ]; then
  # Use the provided files-from file
  # Sort by file size if possible (check if file has two columns: size and filename)
  if grep -q "^[0-9]* " "$FILES_FROM"; then
    # Files-from contains sizes, sort by size
    sort --numeric-sort --reverse "$FILES_FROM" > "${TMPDIR}/files.all"
  else
    # Files-from contains only filenames, no sorting by size
    cat "$FILES_FROM" > "${TMPDIR}/files.all"
  fi
else
  # For download, source is remote
  rsync "${RSYNC_OPTS[@]}" --out-format="%l %n" --no-v --dry-run "$SOURCE_ARG" "$DEST_ARG" 2> /dev/null \
    | grep -v "sending incremental file list" \
    | sort --numeric-sort --reverse \
    > "${TMPDIR}/files.all"
fi

# check for nothing-to-do
TOTAL_FILES=$(wc -l < "${TMPDIR}/files.all")
if [ -n "$FILES_FROM" ] && grep -q "^[0-9]* " "$FILES_FROM"; then
  TOTAL_SIZE=$(awk '{ts+=$1}END{printf "%.0f", ts}' < "${TMPDIR}/files.all")
  echo -e "${GREEN}INFO: ${TOTAL_FILES} files ($(( TOTAL_SIZE/1024**2 )) MB) to transfer.${NC}"
else
  echo -e "${GREEN}INFO: ${TOTAL_FILES} files to transfer.${NC}"
fi

if [ "${TOTAL_FILES}" -eq "0" ]; then
  echo -e "${ORANGE}WARN: Nothing to transfer :)${NC}"
  exit 0
fi

# Remove directories from files.all if not using files-from
if [ -z "$FILES_FROM" ]; then
  grep -v '/$' "${TMPDIR}/files.all" > "${TMPDIR}/files.filtered"
  mv "${TMPDIR}/files.filtered" "${TMPDIR}/files.all"
fi

# Ensure the destination directory exists only once
if [ "$IS_UPLOAD" = true ]; then
  # For upload, ensure the destination directory exists on the first host
  if [[ -n "$REMOTE_USER" ]]; then
    SSH_DEST="${REMOTE_USER}@$((HOST_START_INDEX))"
  else
    SSH_DEST="$((HOST_START_INDEX))"
  fi

  # Make sure the destination directory exists
  ssh $SSH_DEST "mkdir -p '${REMOTE_PATH}'"
  echo -e "${GREEN}INFO: Ensured destination directory exists on first host${NC}"
fi

# Create a batch file for each server
for ((i=0; i<PARALLEL_RSYNC; i++)); do
  touch "${TMPDIR}/batch.${i}"
done

# Initialize file queue
echo -e "${GREEN}INFO: Creating file queue...${NC}"
cp "${TMPDIR}/files.all" "${TMPDIR}/queue"

# Create a lockfile for queue access
touch "${TMPDIR}/queue.lock"

# Create worker function for parallel processing
worker_function() {
  HOST_NUM=$1
  BATCH_FILE="${TMPDIR}/batch.${HOST_NUM}"
  # Restore RSYNC_OPTS array from the serialized string
  eval "$RSYNC_OPTS_STR"

  # Generate remote path based on direction
  if [[ -n "$REMOTE_USER" ]]; then
    REMOTE="${REMOTE_USER}@${HOST_NUM}"
  else
    REMOTE="${HOST_NUM}"
  fi

  TOTAL_PROCESSED=0

  while true; do
    # Get a batch of files from the queue using flock to ensure exclusive access
    flock "${TMPDIR}/queue.lock" bash -c "
      if [ -s \"${TMPDIR}/queue\" ]; then
        head -n ${BATCH_SIZE} \"${TMPDIR}/queue\" > \"${BATCH_FILE}\"
        sed -i \"1,${BATCH_SIZE}d\" \"${TMPDIR}/queue\"
        echo 'got_files'
      else
        echo 'queue_empty'
      fi
    " > "${TMPDIR}/status.${HOST_NUM}"

    STATUS=$(cat "${TMPDIR}/status.${HOST_NUM}")

    if [ "$STATUS" = "queue_empty" ]; then
      echo -e "${GREEN}Host ${HOST_NUM}: Completed ${TOTAL_PROCESSED} files${NC}"
      break
    fi

    # Count files in this batch
    BATCH_COUNT=$(wc -l < "${BATCH_FILE}")
    TOTAL_PROCESSED=$((TOTAL_PROCESSED + BATCH_COUNT))

    # Extract just the filenames (no sizes) if needed
    if grep -q "^[0-9]* " "${BATCH_FILE}"; then
      awk '{print $2}' "${BATCH_FILE}" > "${BATCH_FILE}.names"
    else
      # Already just filenames
      cp "${BATCH_FILE}" "${BATCH_FILE}.names"
    fi

    # Build rsync command
    CMD="rsync --files-from=${BATCH_FILE}.names"

    # Add bandwidth limit if specified
    if [ -n "$BANDWIDTH_PER_TRANSFER" ]; then
      CMD="${CMD} --bwlimit=${BANDWIDTH_PER_TRANSFER}"
    fi

    # Add the remaining options
    CMD="${CMD} ${RSYNC_OPTS[*]}"

    if [ "$IS_UPLOAD" = true ]; then
      # For upload, transfer from local to remote host
      CMD="${CMD} ${LOCAL_ARG} ${REMOTE}:${REMOTE_PATH}"
    else
      # For download, transfer from remote host to local
      CMD="${CMD} ${REMOTE}:${REMOTE_PATH} ${LOCAL_ARG}"
    fi

    # Execute the rsync command
    $CMD

    # Small delay to prevent overwhelming the system
    sleep 0.1
  done
}

echo -e "${GREEN}INFO: Starting transfer with dynamic queue...${NC}"
SECONDS=0

# Export the function for use with parallel
export -f worker_function
export TMPDIR
export REMOTE_PATH
export REMOTE
export LOCAL_ARG
export IS_UPLOAD
export REMOTE_USER
export BANDWIDTH_PER_TRANSFER
export BATCH_SIZE
export GREEN
RSYNC_OPTS_STR=$(declare -p RSYNC_OPTS)
export RSYNC_OPTS_STR

# Generate the sequence of host numbers
HOSTS=()
for ((i=0; i<PARALLEL_RSYNC; i++)); do
  HOSTS+=($((HOST_START_INDEX + i)))
done

# Execute the worker function in parallel
echo -e "${GREEN}INFO: Starting ${PARALLEL_RSYNC} worker processes...${NC}"
printf '%s\n' "${HOSTS[@]}" | parallel -j "${PARALLEL_RSYNC}" --verbose --progress worker_function

echo -e "${GREEN}INFO: All transfers completed in ${SECONDS}s${NC}"

# Verify if queue is empty
if [ -s "${TMPDIR}/queue" ]; then
  REMAINING=$(wc -l < "${TMPDIR}/queue")
  echo -e "${ORANGE}WARN: ${REMAINING} files left in queue! Transfer may have been incomplete.${NC}"
  exit 1
else
  echo -e "${GREEN}SUCCESS: All files transferred successfully!${NC}"
fi